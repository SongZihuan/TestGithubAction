name: Publish Go Code

on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - master

env:
  PACKAGE_NAME: huan-go-test
  PACKAGE_FILE_NAME_DEB: huan-go-test-package-deb
  PACKAGE_FILE_NAME_RPM: huan-go-test-package-rpm
  BINARY_FILE_NAME: huan-go-test
  OUTPUT_UBUNTU_NAME: huan-go-test-ubuntu
  OUTPUT_REHL_NAME: huan-go-test-rehl
  VERSION_FILE: VERSION
  CHANGE_LOG_DEB_BRANCH: changelog-deb

jobs:
  ready:
    # 此处 if 中不能使用env
    if: github.event_name == 'pull_request' && github.event.pull_request.head.ref != 'changelog-deb' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get default branch
        id: get_branch
        run: |
          if git ls-remote --heads origin main | grep -q main; then
            echo "branch=main" >> $GITHUB_OUTPUT
            echo "default branch: main"
          elif git ls-remote --heads origin master | grep -q master; then
            echo "branch=master" >> $GITHUB_OUTPUT
            echo "default branch: master"
          else
            echo "default branch not found"
            exit 1
          fi

    outputs:
      branch: ${{ steps.get_branch.outputs.branch }}

  build-ubuntu:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
      volumes:
        - /home/runner/work:/home/runner/work
        - /home/runner/work:/__w
    needs: ready

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4' # 根据需要指定Go版本

      - name: Build go
        run: go build -o "${{ github.workspace }}/${{ env.OUTPUT_UBUNTU_NAME }}" -trimpath -ldflags="-s -w" github.com/SongZihuan/TestGithubAction

      - name: List build directory
        run: |
          ls -l "${{ github.workspace }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_UBUNTU_NAME }}
          path: ${{ github.workspace }}/${{ env.OUTPUT_UBUNTU_NAME }}
          if-no-files-found: error

  build-redhat:
    runs-on: ubuntu-latest
    container:
      image: redhat/ubi9
      volumes:
        - /home/runner/work:/home/runner/work
        - /home/runner/work:/__w
    needs: ready

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4' # 根据需要指定Go版本

      - name: Build go
        run: go build -o "${{ github.workspace }}/${{ env.OUTPUT_REHL_NAME }}" -trimpath -ldflags="-s -w" github.com/SongZihuan/TestGithubAction

      - name: List build directory
        run: ls -l "${{ github.workspace }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_REHL_NAME }}
          path: ${{ github.workspace }}/${{ env.OUTPUT_REHL_NAME }}
          if-no-files-found: error

  create_release:
    runs-on: ubuntu-latest
    needs:
      - build-ubuntu
      - build-redhat

    permissions: write-all

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
          fetch-tags: true

      - name: Fetch all tags
        run: git fetch --tags

      - name: Create tag
        id: tag_version
        run: |
          if [ -f ${{ github.workspace }}/${{ env.VERSION_FILE }} ]; then
            echo "VERSION file found."
          
            if git tag --list | grep -q "^$(cat ${{ env.VERSION_FILE }})$"; then
              if [[ -n $(git tag --sort=-creatordate | grep -i '^v'  | head -1) ]]; then
                tag=$(git tag --sort=-creatordate | grep -i '^v'  | head -1 | awk -F. '{print $1"."$2+1".0"}')
                echo "tag=$tag" >> $GITHUB_OUTPUT
                echo "Auto Version is $tag"
              else
                echo "tag=v1.0.0" >> $GITHUB_OUTPUT
                echo "First Version is v1.0.0"
              fi
            else
              echo "tag=$(cat ${{ env.VERSION_FILE }})" >> $GITHUB_OUTPUT
              echo "File Version is $(cat ${{ env.VERSION_FILE }})"
            fi
          else
            echo "VERSION file not found."
          
            if [[ -n $(git tag --sort=-creatordate | grep -i '^v'  | head -1) ]]; then
              tag=$(git tag --sort=-creatordate | grep -i '^v'  | head -1 | awk -F. '{print $1"."$2+1".0"}')
              echo "tag=$tag" >> $GITHUB_OUTPUT
              echo "Auto (Not File) Version is $tag"
            else
              echo "tag=v1.0.0" >> $GITHUB_OUTPUT
              echo "First (Not File) Version is v1.0.0"
            fi
          fi

      - name: Create Git tag
        run: git tag "${{ steps.tag_version.outputs.tag }}"

      - name: Download ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.OUTPUT_UBUNTU_NAME }}
          path: ${{ github.workspace }}

      - name: Download redhat artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.OUTPUT_REHL_NAME }}
          path: ${{ github.workspace }}

      - name: List directory
        run: ls -l ${{ github.workspace }}

      - name: Push tag to github
        run: git push origin "${{ steps.tag_version.outputs.tag }}"

      - name: Create github release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.workspace }}/${{ env.OUTPUT_UBUNTU_NAME }},${{ github.workspace }}/${{ env.OUTPUT_REHL_NAME }}"
          artifactErrorsFailBuild: true
          allowUpdates: false
          body: |
            新版本 ${{ steps.tag_version.outputs.tag }} 发布啦！
            快来体验吧！
          generateReleaseNotes: true
          makeLatest: "legacy"
          tag: "${{ steps.tag_version.outputs.tag }} "

      - name: Output the URL of the new release
        run: echo "The release is available at ${{ steps.create_release.outputs.html_url }}"
    outputs:
      tag: "${{ steps.tag_version.outputs.tag }}"
      release: "${{ steps.create_release.outputs.html_url }}"
      upload_url: "${{ steps.create_release.outputs.upload_url }}"

  build_deb:
    runs-on: ubuntu-latest
    needs:
      - ready
      - create_release

    env:
      FILE_SECTION: ".section"
      FILE_PRIORITY: ".priority"
      FILE_ARCHITECTURE: ".architecture"
      FILE_DEPENDS: ".depends"
      FILE_DESCRIBE: ".describe"
      FILE_MAINTAINER: ".maintainer"
      FILE_BIN_PATH: ".bin-path"
      FILE_COMPAT: ".compat"
      FILE_RULES: ".rules"
      FILE_COPYRIGHT: ".copyright"
      FILE_BUILD_DEPENDS: ".build.depends"

      DESCRIBE_DEFAULT: "The author, like a wisp of cloud passing by, leaves not a single word, yet bestows boundless room for imagination upon the world."
      BIN_PATH_DEFAULT: "usr/local/bin"
      ARCHITECTURE_DEFAULT: "amd64"
      COMPAT_DEFAULT: "10"

    steps:
      - name: Set up dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential
          sudo apt-get install -y dpkg-dev
          sudo apt-get install -y devscripts debhelper
          sudo apt-get install -y debhelper
          sudo apt-get install -y fakeroot
          sudo apt-get install -y gnupg

      - name: Configure GPG
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
      
          # 配置 gpg.conf
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
      
          # 配置 gpg-agent.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          
          echo "export GPG_TTY=/dev/null" >> $GITHUB_ENV
      
          # 重新加载 gpg-agent
          echo RELOADAGENT | gpg-connect-agent

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --yes --import
          gpg --list-secret-keys

      - name: Test GPG signing
        run: |
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --quick-sign-key ${{ secrets.GPG_KEY_ID }}
          echo "GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史记录以便能够创建标签
          token: ${{ secrets.GITHUB_TOKEN }} # 使用GITHUB_TOKEN进行身份验证

      - name: Download ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.OUTPUT_UBUNTU_NAME }}
          path: ${{ github.workspace }}

      - name: Default file check
        run: |
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_SECTION }}" ]; then
            echo "misc" > ${{ github.workspace }}/${{ env.FILE_SECTION }}
          fi

          if [ ! -f "${{ github.workspace }}/${{ env.FILE_PRIORITY }}" ]; then
            echo "extra" > ${{ github.workspace }}/${{ env.FILE_PRIORITY }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_ARCHITECTURE }}" ]; then
            echo "${{ env.ARCHITECTURE_DEFAULT }}" > ${{ github.workspace }}/${{ env.FILE_ARCHITECTURE }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_MAINTAINER }}" ]; then
            git show -s --format='%an<%ae>' $(git rev-list --max-parents=0 HEAD) > ${{ github.workspace }}/${{ env.FILE_MAINTAINER }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_DESCRIBE }}" ]; then
            echo "${{ env.DESCRIBE_DEFAULT }}" > ${{ github.workspace }}/${{ env.FILE_DESCRIBE }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_BIN_PATH }}" ]; then
            echo "${{ env.BIN_PATH_DEFAULT }}" > ${{ github.workspace }}/${{ env.FILE_BIN_PATH }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_COMPAT }}" ]; then
            echo "${{ env.COMPAT_DEFAULT }}" > ${{ github.workspace }}/${{ env.FILE_COMPAT }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_RULES }}" ]; then
            echo '#!/usr/bin/make -f' > ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '%:' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo -e '\tdh $@' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo 'override_dh_auto_build:' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo -e '\t# skip' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo 'override_dh_auto_test:' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo -e '\t# skip' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo 'override_dh_usrlocal:' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo -e '\t# skip' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_COPYRIGHT }}" ]; then
            echo "Error: ${{ env.FILE_COPYRIGHT }} not found!"
            exit 1
          fi

      - name: Package into .deb
        id: before-package

        run: |
          mkdir -p "${{ github.workspace }}/debian"
          mkdir -p "${{ github.workspace }}/bin"
          
          VERSION="$(echo "${{ needs.create_release.outputs.tag }}" | sed 's/^v//')"
          echo "Version: ${VERSION}"
          
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          
          echo "Source: ${{ env.PACKAGE_NAME }}" > ${{ github.workspace }}/debian/control
          echo "Maintainer: $(cat ${{ github.workspace }}/${{ env.FILE_MAINTAINER }})" >> ${{ github.workspace }}/debian/control
          echo "Section: $(cat ${{ github.workspace }}/${{ env.FILE_SECTION }})" >> ${{ github.workspace }}/debian/control
          echo "Priority: $(cat ${{ github.workspace }}/${{ env.FILE_PRIORITY }})" >> ${{ github.workspace }}/debian/control
          echo "Standards-Version: 4.5.0" >> ${{ github.workspace }}/debian/control
          if [ -f "${{ github.workspace }}/${{ env.FILE_DEPENDS }}" ]; then
            echo "Build-Depends: $(cat ${{ github.workspace }}/${{ env.FILE_BUILD_DEPENDS }})" >> ${{ github.workspace }}/debian/control
          else
            echo "Build-Depends: debhelper (>= 12)" >> ${{ github.workspace }}/debian/control
          fi  
          
          echo "" >> ${{ github.workspace }}/debian/control
          
          echo "Package: ${{ env.PACKAGE_NAME }}" >> ${{ github.workspace }}/debian/control
          echo "Architecture: $(cat ${{ github.workspace }}/${{ env.FILE_ARCHITECTURE }})" >> ${{ github.workspace }}/debian/control
          if [ -f "${{ github.workspace }}/${{ env.FILE_DEPENDS }}" ]; then
            echo "Depends: $(cat ${{ github.workspace }}/${{ env.FILE_DEPENDS }})" >> ${{ github.workspace }}/debian/control
          fi        
          echo "Description: $(cat ${{ github.workspace }}/${{ env.FILE_DESCRIBE }})" >> ${{ github.workspace }}/debian/control
          
          cat ${{ github.workspace }}/debian/control
          
          cp ${{ github.workspace }}/${{ env.FILE_COMPAT }} ${{ github.workspace }}/debian/compat
          cp ${{ github.workspace }}/${{ env.FILE_COPYRIGHT }} ${{ github.workspace }}/debian/copyright
          cp ${{ github.workspace }}/${{ env.FILE_RULES }} ${{ github.workspace }}/debian/rules
          sudo chmod a+x ${{ github.workspace }}/debian/rules
          
          if [ ! -f "${{ github.workspace }}/debian/changelog" ]; then
            EDITOR="/bin/true" VISUAL="/bin/true" DEBFULLNAME="$(git show -s --format='%an' $(git rev-list --max-parents=0 HEAD))" DEBEMAIL="$(git show -s --format='%ae' $(git rev-list --max-parents=0 HEAD))" dch --create --package ${{ env.PACKAGE_NAME }} --newversion 1.0.0 --force-distribution --distribution unstable "Initial release"
          fi 
          
          sudo chmod a+x "${{ github.workspace }}/${{ env.OUTPUT_UBUNTU_NAME }}"
          mv "${{ github.workspace }}/${{ env.OUTPUT_UBUNTU_NAME }}" "${{ github.workspace }}/bin/${{ env.PACKAGE_NAME }}"
          
          echo "bin/${{ env.PACKAGE_NAME }} $(cat ${{ env.FILE_BIN_PATH }})" > ${{ github.workspace }}/debian/${{ env.PACKAGE_NAME }}.install
          
          EDITOR="/bin/true" VISUAL="/bin/true" DEBFULLNAME="$(git show -s --format='%an' $(git rev-list --max-parents=0 HEAD))" DEBEMAIL="$(git show -s --format='%ae' $(git rev-list --max-parents=0 HEAD))" dch --package ${{ env.PACKAGE_NAME }} --newversion ${VERSION} --force-distribution --distribution unstable "Visit to ${{ needs.create_release.outputs.release }}!"

      - name: List directory
        run: |
          echo "List ${{ github.workspace }}"
          ls -al ${{ github.workspace }}
          
          echo "List ${{ github.workspace }}/debian"
          ls -al ${{ github.workspace }}/debian

      - name: Package deb
        id: package
        run: |
          cat ${{ github.workspace }}/debian/rules
          echo "${{ secrets.GPG_PASSPHRASE }}" | dpkg-buildpackage --sign-key="${{ secrets.GPG_KEY_ID }}"
          echo "Architecture=$(cat ${{ env.FILE_ARCHITECTURE }})" >> $GITHUB_OUTPUT

      - name: List directory after package
        run: ls -al ${{ github.workspace }}/../

      - name: Temporary copy file
        run: |
          mkdir -p ${{ github.workspace }}/temp
          
          cp ${{ github.workspace }}/../${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}.dsc ${{ github.workspace }}/temp
          cp ${{ github.workspace }}/../${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}_${{ steps.package.outputs.Architecture }}.deb ${{ github.workspace }}/temp
          cp ${{ github.workspace }}/../${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}_${{ steps.package.outputs.Architecture }}.buildinfo ${{ github.workspace }}/temp
          cp ${{ github.workspace }}/../${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}_${{ steps.package.outputs.Architecture }}.changes ${{ github.workspace }}/temp

      - name: Upload deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_FILE_NAME_DEB }}
          path: |
            ${{ github.workspace }}/temp/${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}.dsc
            ${{ github.workspace }}/temp/${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}_${{ steps.package.outputs.Architecture }}.deb
            ${{ github.workspace }}/temp/${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}_${{ steps.package.outputs.Architecture }}.buildinfo
            ${{ github.workspace }}/temp/${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}_${{ steps.package.outputs.Architecture }}.changes
          if-no-files-found: error
          retention-days: 90

      - name: Create and use a temporary directory
        id: create_temp
        run: |
          echo "temp=$(mktemp -d)" >> $GITHUB_OUTPUT

      - name: Save changelog
        run: cp ${{ github.workspace }}/debian/changelog ${{ steps.create_temp.outputs.temp }}/changelog

      - name: Git set config
        run: |
          git config --global user.name $(git show -s --format='%an' $(git rev-list --max-parents=0 HEAD))
          git config --global user.email $(git show -s --format='%ae' $(git rev-list --max-parents=0 HEAD))
          git config --global pull.rebase true

      - name: Git reset
        run: git reset --hard HEAD

      - name: Git checkout branch
        run: |
          # 检查远程是否有该分支
          if git ls-remote --heads origin ${{ env.CHANGE_LOG_DEB_BRANCH }}-deb | grep -q ${{ env.CHANGE_LOG_DEB_BRANCH }}; then
            git pull origin ${{ env.CHANGE_LOG_DEB_BRANCH }}:${{ env.CHANGE_LOG_DEB_BRANCH }}
            git checkout ${{ env.CHANGE_LOG_DEB_BRANCH }}
          else
            git pull origin ${{ needs.ready.outputs.branch }}:${{ needs.ready.outputs.branch }}
            git checkout ${{ needs.ready.outputs.branch }}
            git checkout -b ${{ env.CHANGE_LOG_DEB_BRANCH }}
          fi

      - name: Write changelog to git
        run: cp -f ${{ steps.create_temp.outputs.temp }}/changelog ${{ github.workspace }}/debian/changelog

      - name: Push debian/changelog
        run: |
          git add ${{ github.workspace }}/debian/changelog
          EDITOR="/bin/true" VISUAL="/bin/true" git commit -m "Update debian/changelog for ${{needs.create_release.outputs.tag}}"
          git push -f origin HEAD:${{ env.CHANGE_LOG_DEB_BRANCH }}

      - name: Create or get pull request
        id: create_pr
        run: |
          if [[ -z $(gh pr list --state open --head ${{ env.CHANGE_LOG_DEB_BRANCH }} --base ${{ needs.ready.outputs.branch }}) ]]; then
            gh pr create --title "Update debian/changelog" --body "This is an automated PR requesting a merge into debian/changelog. Created by github workflow." --base ${{ needs.ready.outputs.branch }} --head ${{ env.CHANGE_LOG_DEB_BRANCH }}
            echo "merge=true" >> $GITHUB_OUTPUT
            echo "New pull request"
          else
            echo "merge=false" >> $GITHUB_OUTPUT
            echo "Pull request exists"
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Get pull request id
        id: get_prid
        if: steps.create_pr.outputs.merge == 'true'
        run: |
          PR_ID=$(gh pr list --state open --head ${{ env.CHANGE_LOG_DEB_BRANCH }} --base ${{ needs.ready.outputs.branch }} --json number --jq '.[0].number')
          if [ -z "$PR_ID" ]; then
            echo "PANIC Pull Requests Not Found"
            exit 1
          fi
          echo "prid=$PR_ID" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ github.token }}
      
      - name: Merge pull request
        if: steps.create_pr.outputs.merge == 'true'
        run:
          gh pr merge ${{steps.get_prid.outputs.prid}} --rebase --delete-branch
        env:
          GITHUB_TOKEN: ${{ github.token }}

    outputs:
      PACKAGE_NAME: ${{ env.PACKAGE_NAME }}
      VERSION: ${{ steps.before-package.outputs.VERSION }}
      ARCHITECTURE: ${{ steps.package.outputs.Architecture }}

  upload_package_deb:
    runs-on: ubuntu-latest
    needs:
      - create_release
      - build_deb

    steps:
      - name: Download package dev artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_FILE_NAME_DEB }}
          path: ${{ github.workspace }}

      - name: Get file md5
        run: |
          echo "$(md5sum ${{ github.workspace }}/${{ needs.build_deb.outputs.PACKAGE_NAME }}_${{ needs.build_deb.outputs.VERSION }}_${{ needs.build_deb.outputs.ARCHITECTURE }}.deb | awk '{print $1}')" > ${{ github.workspace }}/${{ needs.build_deb.outputs.PACKAGE_NAME }}_${{ needs.build_deb.outputs.VERSION }}_${{ needs.build_deb.outputs.ARCHITECTURE }}.deb.md5
          
      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create_release.outputs.tag }}
          files: |
            ${{ github.workspace }}/${{ needs.build_deb.outputs.PACKAGE_NAME }}_${{ needs.build_deb.outputs.VERSION }}_${{ needs.build_deb.outputs.ARCHITECTURE }}.deb
            ${{ github.workspace }}/${{ needs.build_deb.outputs.PACKAGE_NAME }}_${{ needs.build_deb.outputs.VERSION }}_${{ needs.build_deb.outputs.ARCHITECTURE }}.deb.md5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 自动提供的 GitHub Token

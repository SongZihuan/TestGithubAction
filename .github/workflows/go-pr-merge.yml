name: Publish Go Code

on:
  push:
    branches-ignore:
      - changelog-deb
  pull_request:
    types:
      - closed
    branches:
      - main
      - master


env:
  PACKAGE_NAME: huan-go-test
  PACKAGE_FILE_NAME_DEB: huan-go-test-package-deb
  PACKAGE_FILE_NAME_RPM: huan-go-test-package-rpm
  BINARY_FILE_NAME: huan-go-test
  OUTPUT_UBUNTU_NAME: huan-go-test-ubuntu
  OUTPUT_REHL_NAME: huan-go-test-rehl
  VERSION_FILE: VERSION
  CHANGE_LOG_DEB_BRANCH: changelog-deb

jobs:
  merge:
#    if: github.event.pull_request.merged == true # 仅当PR被合并时触发
    if: github.head_ref != 'changelog-deb'
    runs-on: ubuntu-latest

    steps:
      - name: Pull Requests Merge
        run: echo "pull requests merge"

  build-ubuntu:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
      volumes:
        - /home/runner/work:/home/runner/work
        - /home/runner/work:/__w
    needs: merge

    steps:
      - name: Echo Github Work Space
        run: |
          echo "Github Work Space: ${{ github.workspace }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4' # 根据需要指定Go版本

      - name: Build go
        run: go build -o "${{ github.workspace }}/${{ env.OUTPUT_UBUNTU_NAME }}" -trimpath -ldflags="-s -w" github.com/SongZihuan/TestGithubAction

      - name: List build directory
        run: |
          ls -l "${{ github.workspace }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_UBUNTU_NAME }}
          path: ${{ github.workspace }}/${{ env.OUTPUT_UBUNTU_NAME }}
          if-no-files-found: error

  build-redhat:
    runs-on: ubuntu-latest
    container:
      image: redhat/ubi9
      volumes:
        - /home/runner/work:/home/runner/work
        - /home/runner/work:/__w
    needs: merge

    steps:
      - name: Init Redhat UBI 9 for Github Action
        run: |
          ln -s /home/runner/work /__w
          ln -s /home/runner/work/_temp /__t

      - name: Echo Github Work Space
        run: |
          echo "Github Work Space: ${{ github.workspace }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4' # 根据需要指定Go版本

      - name: Build go
        run: go build -o "${{ github.workspace }}/${{ env.OUTPUT_REHL_NAME }}" -trimpath -ldflags="-s -w" github.com/SongZihuan/TestGithubAction

      - name: List build directory
        run: ls -l "${{ github.workspace }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_REHL_NAME }}
          path: ${{ github.workspace }}/${{ env.OUTPUT_REHL_NAME }}
          if-no-files-found: error

  create_release:
    runs-on: ubuntu-latest
    needs:
      - build-ubuntu
      - build-redhat

    permissions: write-all

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史记录以便能够创建标签

      - name: Fetch tags
        run: git fetch --tags

      - name: Create Tag
        id: tag_version
        run: |
          if [ -f ${{ github.workspace }}/${{ env.VERSION_FILE }} ]; then
            echo "VERSION file found."
            VERSION=$(cat ${{ env.VERSION_FILE }})
          
            if git tag --list | grep -q "^${VERSION}$"; then
              if git describe --tags; then
                echo "Tag is $(git describe --tags --abbrev=0)"
                echo "tag=$(git describe --tags --abbrev=0 | awk -F. '{print $1"."$2+1".0"}')" >> $GITHUB_OUTPUT
              else
                echo "tag=v1.0.0" >> $GITHUB_OUTPUT
              fi
            else
              echo "tag=$VERSION" >> $GITHUB_OUTPUT
            fi
          else
            echo "VERSION file not found."
            if git describe --tags; then
                echo "tag=$(git describe --tags --abbrev=0 | awk -F. '{print $1"."$2+1".0"}')" >> $GITHUB_OUTPUT
              else
                echo "tag=v1.0.0" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create Git tag
        run: git tag "${{ steps.tag_version.outputs.tag }}"

      - name: Download ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.OUTPUT_UBUNTU_NAME }}
          path: ${{ github.workspace }}

      - name: Download redhat artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.OUTPUT_REHL_NAME }}
          path: ${{ github.workspace }}

      - name: List directory
        run: ls -l ${{ github.workspace }}

      - name: Push tag to GitHub
        run: git push origin "${{ steps.tag_version.outputs.tag }}"

      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.workspace }}/${{ env.OUTPUT_UBUNTU_NAME }},${{ github.workspace }}/${{ env.OUTPUT_REHL_NAME }}"
          artifactErrorsFailBuild: true
          allowUpdates: false
          body: |
            新版本 ${{ steps.tag_version.outputs.tag }} 发布啦！
            快来体验吧！
          generateReleaseNotes: true
          makeLatest: "legacy"
          tag: "${{ steps.tag_version.outputs.tag }} "

      - name: Output the URL of the new release
        run: echo "The release is available at ${{ steps.create_release.outputs.html_url }}"
    outputs:
      tag: "${{ steps.tag_version.outputs.tag }}"
      release: "${{ steps.create_release.outputs.html_url }}"

  publish_deb:
    runs-on: ubuntu-latest
    needs:
      - create_release

    env:
      FILE_SECTION: ".section"
      FILE_PRIORITY: ".priority"
      FILE_ARCHITECTURE: ".architecture"
      FILE_DEPENDS: ".depends"
      FILE_DESCRIBE: ".describe"
      FILE_MAINTAINER: ".maintainer"
      FILE_BIN_PATH: ".bin-path"
      FILE_COMPAT: ".compat"
      FILE_RULES: ".rules"
      FILE_COPYRIGHT: ".copyright"
      FILE_BUILD_DEPENDS: ".build.depends"

      DESCRIBE_DEFAULT: "The author, like a wisp of cloud passing by, leaves not a single word, yet bestows boundless room for imagination upon the world."
      BIN_PATH_DEFAULT: "usr/local/bin"
      ARCHITECTURE_DEFAULT: "amd64"
      COMPAT_DEFAULT: "9"

    steps:
      - name: Set up dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential
          sudo apt-get install -y dpkg-dev
          sudo apt-get install -y devscripts debhelper
          sudo apt-get install -y debhelper
          sudo apt-get install -y fakeroot

      - name: Test dependencies
        run: which dh

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史记录以便能够创建标签
          token: ${{ secrets.GITHUB_TOKEN }} # 使用GITHUB_TOKEN进行身份验证

      - name: Download ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.OUTPUT_UBUNTU_NAME }}
          path: ${{ github.workspace }}

      - name: Package Default File Check
        run: |
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_SECTION }}" ]; then
            echo "misc" > ${{ github.workspace }}/${{ env.FILE_SECTION }}
          fi

          if [ ! -f "${{ github.workspace }}/${{ env.FILE_PRIORITY }}" ]; then
            echo "extra" > ${{ github.workspace }}/${{ env.FILE_PRIORITY }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_ARCHITECTURE }}" ]; then
            echo "${{ env.ARCHITECTURE_DEFAULT }}" > ${{ github.workspace }}/${{ env.FILE_ARCHITECTURE }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_MAINTAINER }}" ]; then
            git show -s --format='%an<%ae>' $(git rev-list --max-parents=0 HEAD) > ${{ github.workspace }}/${{ env.FILE_MAINTAINER }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_DESCRIBE }}" ]; then
            echo "${{ env.DESCRIBE_DEFAULT }}" > ${{ github.workspace }}/${{ env.FILE_DESCRIBE }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_BIN_PATH }}" ]; then
            echo "${{ env.BIN_PATH_DEFAULT }}" > ${{ github.workspace }}/${{ env.FILE_BIN_PATH }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_COMPAT }}" ]; then
            echo "${{ env.COMPAT_DEFAULT }}" > ${{ github.workspace }}/${{ env.FILE_COMPAT }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_RULES }}" ]; then
            echo '#!/usr/bin/make -f' > ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '%:' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo -e '\tdh $@' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo 'override_dh_auto_build:' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo -e '\t# skip' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo 'override_dh_auto_test:' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo -e '\t# skip' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo 'override_dh_usrlocal:' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo -e '\t# skip' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
            echo '' >> ${{ github.workspace }}/${{ env.FILE_RULES }}
          fi
          
          if [ ! -f "${{ github.workspace }}/${{ env.FILE_COPYRIGHT }}" ]; then
            echo "Error: ${{ env.FILE_COPYRIGHT }} not found!"
            exit 1
          fi

      - name: Package into .deb
        id: before-package

        run: |
          mkdir -p "${{ github.workspace }}/debian"
          mkdir -p "${{ github.workspace }}/bin"
          
          TAG=${{ needs.create_release.outputs.tag }}
          VERSION="${TAG#v}"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          
          echo "Source: ${{ env.PACKAGE_NAME }}" > ${{ github.workspace }}/debian/control
          echo "Maintainer: $(cat ${{ github.workspace }}/${{ env.FILE_MAINTAINER }})" >> ${{ github.workspace }}/debian/control
          echo "Section: $(cat ${{ github.workspace }}/${{ env.FILE_SECTION }})" >> ${{ github.workspace }}/debian/control
          echo "Priority: $(cat ${{ github.workspace }}/${{ env.FILE_PRIORITY }})" >> ${{ github.workspace }}/debian/control
          echo "Standards-Version: 4.5.0" >> ${{ github.workspace }}/debian/control
          if [ -f "${{ github.workspace }}/${{ env.FILE_DEPENDS }}" ]; then
            echo "Build-Depends: $(cat ${{ github.workspace }}/${{ env.FILE_BUILD_DEPENDS }})" >> ${{ github.workspace }}/debian/control
          else
            echo "Build-Depends: debhelper (>= 12)" >> ${{ github.workspace }}/debian/control
          fi  
          
          echo "" >> ${{ github.workspace }}/debian/control
          
          echo "Package: ${{ env.PACKAGE_NAME }}" >> ${{ github.workspace }}/debian/control
          echo "Architecture: $(cat ${{ github.workspace }}/${{ env.FILE_ARCHITECTURE }})" >> ${{ github.workspace }}/debian/control
          if [ -f "${{ github.workspace }}/${{ env.FILE_DEPENDS }}" ]; then
            echo "Depends: $(cat ${{ github.workspace }}/${{ env.FILE_DEPENDS }})" >> ${{ github.workspace }}/debian/control
          fi        
          echo "Description: $(cat ${{ github.workspace }}/${{ env.FILE_DESCRIBE }})" >> ${{ github.workspace }}/debian/control
          
          cat ${{ github.workspace }}/debian/control
          
          cp ${{ github.workspace }}/${{ env.FILE_COMPAT }} ${{ github.workspace }}/debian/compat
          cp ${{ github.workspace }}/${{ env.FILE_COPYRIGHT }} ${{ github.workspace }}/debian/copyright
          cp ${{ github.workspace }}/${{ env.FILE_RULES }} ${{ github.workspace }}/debian/rules
          sudo chmod a+x ${{ github.workspace }}/debian/rules
          
          if [ ! -f "${{ github.workspace }}/debian/changelog" ]; then
            EDITOR="/bin/true" VISUAL="/bin/true" DEBFULLNAME="$(git show -s --format='%an' $(git rev-list --max-parents=0 HEAD))" DEBEMAIL="$(git show -s --format='%ae' $(git rev-list --max-parents=0 HEAD))" dch --create --package ${{ env.PACKAGE_NAME }} --force-distribution --newversion 1.0.0 --distribution unstable "Initial release"
          fi 
          
          sudo chmod a+x "${{ github.workspace }}/${{ env.OUTPUT_UBUNTU_NAME }}"
          mv "${{ github.workspace }}/${{ env.OUTPUT_UBUNTU_NAME }}" "${{ github.workspace }}/bin/${{ env.BINARY_FILE_NAME }}"
          
          echo "bin/${{ env.BINARY_FILE_NAME }} $(cat ${{ env.FILE_BIN_PATH }})" > ${{ github.workspace }}/debian/${{ env.PACKAGE_NAME }}.install
          
          EDITOR="/bin/true" VISUAL="/bin/true" DEBFULLNAME="$(git show -s --format='%an' $(git rev-list --max-parents=0 HEAD))" DEBEMAIL="$(git show -s --format='%ae' $(git rev-list --max-parents=0 HEAD))" dch --package ${{ env.PACKAGE_NAME }} --force-distribution --newversion ${VERSION} --distribution unstable "Visit to ${{ needs.create_release.outputs.release }}!"

      - name: List Directory
        run: |
          echo "List ${{ github.workspace }}"
          ls -al ${{ github.workspace }}
          
          echo "List ${{ github.workspace }}/debian"
          ls -al ${{ github.workspace }}/debian
          
          echo "List ${{ github.workspace }}/bin"
          ls -al ${{ github.workspace }}/bin

      - name: Package deb
        id: package
        run: |
          cat ${{ github.workspace }}/debian/rules
          echo "dh: $(which dh)"
          dpkg-buildpackage -us -uc
          echo "Architecture=$(cat ${{ env.FILE_ARCHITECTURE }})" >> $GITHUB_OUTPUT

      - name: List Directory After Package
        run: ls -al ${{ github.workspace }}/../

      - name: Temporary copy file
        run: |
          mkdir -p ${{ github.workspace }}/temp
          
          cp ${{ github.workspace }}/../${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}.dsc ${{ github.workspace }}/temp
          cp ${{ github.workspace }}/../${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}_${{ steps.package.outputs.Architecture }}.deb ${{ github.workspace }}/temp
          cp ${{ github.workspace }}/../${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}_${{ steps.package.outputs.Architecture }}.buildinfo ${{ github.workspace }}/temp
          cp ${{ github.workspace }}/../${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}_${{ steps.package.outputs.Architecture }}.changes ${{ github.workspace }}/temp

      - name: Upload dev artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_FILE_NAME_DEB }}
          path: |
            ${{ github.workspace }}/temp/${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}.dsc
            ${{ github.workspace }}/temp/${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}_${{ steps.package.outputs.Architecture }}.deb
            ${{ github.workspace }}/temp/${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}_${{ steps.package.outputs.Architecture }}.buildinfo
            ${{ github.workspace }}/temp/${{ env.PACKAGE_NAME }}_${{ steps.before-package.outputs.VERSION }}_${{ steps.package.outputs.Architecture }}.changes
          if-no-files-found: error
          retention-days: 90

      - name: Reset Git
        run: git reset --hard HEAD

      - name: Git pull ${{ env.CHANGE_LOG_DEB_BRANCH }}
        run: |
          # 检查远程是否有该分支
          if git ls-remote --heads origin ${{ env.CHANGE_LOG_DEB_BRANCH }}-deb | grep -q ${{ env.CHANGE_LOG_DEB_BRANCH }}; then
            git pull origin ${{ env.CHANGE_LOG_DEB_BRANCH }}:${{ env.CHANGE_LOG_DEB_BRANCH }}
            git checkout ${{ env.CHANGE_LOG_DEB_BRANCH }}
          else
            git checkout -b ${{ env.CHANGE_LOG_DEB_BRANCH }}
          fi

      - name: Git Config
        run: |
          git config --global user.name $(git show -s --format='%an' $(git rev-list --max-parents=0 HEAD))
          git config --global user.email $(git show -s --format='%ae' $(git rev-list --max-parents=0 HEAD))

      - name: Push debian/changelog
        run: |
          git add ${{ github.workspace }}/debian/changelog
          EDITOR="/bin/true" VISUAL="/bin/true" git commit -m "Update debian/changelog for ${{needs.create_release.outputs.tag}}"
          git push -f origin HEAD:${{ env.CHANGE_LOG_DEB_BRANCH }}

      - name: Create Pull Request
        run: |
          if [[ -z $(gh pr list --state open --head ${{ env.CHANGE_LOG_DEB_BRANCH }} --base main) ]]; then
            gh pr create --title "Update debian/changelog" --body "This is an automated PR requesting a merge into debian/changelog. Created by github workflow." --base main --head feature-branch
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}
